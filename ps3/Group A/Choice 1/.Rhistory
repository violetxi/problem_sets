`27`="2A", `19`="2A", `7`="2A", `53`="2A",
`47`="2B", `8`="2B", `23`="2B", `37`="2B",
`46`="BL", `31`="BL", `14`="BL", `1`="BL"),
expression = recode(imgNum,
`9`="calm", `44`="exci", `36`="calm", `13`="exci",
`18`="exci", `35`="calm", `40`="exci", `11`="calm",
`27`="calm", `19`="exci", `7`="calm", `53`="exci",
`47`="exci", `8`="calm", `23`="exci", `37`="calm",
`46`="exci", `31`="calm", `14`="exci", `1`="calm"),
attractiveHalf = recode(imgNum,
`9`="highAttract", `44`="highAttract", `36`="modAttract", `13`="modAttract",
`18`="highAttract", `35`="highAttract", `40`="modAttract", `11`="modAttract",
`27`="highAttract", `19`="highAttract", `7`="modAttract", `53`="modAttract",
`47`="highAttract", `8`="highAttract", `23`="modAttract", `37`="modAttract",
`46`="highAttract", `31`="highAttract", `14`="modAttract", `1`="modAttract"))
# Insert scene images
DataLongScenes <- Part2 %>%
dplyr::select(ResponseId, matches('SC_')) %>%  # select only image ratings
dplyr::select(-contains("Click")) %>% # take out click data
dplyr::select(-contains("Submit")) %>% # take out page submit data
dplyr::select(-contains("_DO_")) %>% # take out order data
dplyr::select(-contains("Post")) # take out attractiveness ratings for now
# gather (pivot_longer) so that all scenes are in one column and ratings are in "Value"
DataLongScenes <- DataLongScenes %>%
pivot_longer(cols = contains("_"), names_to = "Scene", values_to = "Value")
DataLongScenes$Scene <- str_replace(DataLongScenes$Scene, "SC_", "SC") # Take out "_" before each value in Scene column
# separate scene titles ("Scene") into two columns, one for the image number, and another one for the DV being rated (1 = pleasant, 2 = visit)
DataLongScenes <- DataLongScenes %>%
separate(Scene, c("imgNum", "DV")) %>%
pivot_wider(names_from = DV, values_from = Value)
# Rename columns "1" and "8" to reflect DVs
DataLongScenes <- DataLongScenes %>%
dplyr::rename(scenePleasant = "1", sceneVisit = "8")
# Incorporate info about stimuli block
DataLongScenes <- DataLongScenes %>%
mutate(stimBlock = recode(imgNum,
`SC1`="BL", `SC2`="BL", `SC3`="BL", `SC4`="BL",
`SC5`="1A", `SC6`="1A",
`SC7`="1B", `SC8`="1B",
`SC9`="2A", `SC10`="2A",
`SC11`="2B", `SC12`="2B"))
# Merge face and scene images
imagesMerged <- full_join(DataLong, DataLongScenes, by = c("ResponseId", "stimBlock", "imgNum"))
# Create new column that identifies whether face or scene
imagesMerged$faceOrScene <- ifelse(grepl("SC",imagesMerged$imgNum),'Scene','Face')
# extract just condition info
Conditions <- Part2 %>%
dplyr::select(ResponseId, order, stim)
# insert commas so it's easier to separate in next step
Conditions$stim <- str_replace(Conditions$stim, "A1", "A,1")
Conditions$stim <- str_replace(Conditions$stim, "A2", "A,2")
Conditions$stim <- str_replace(Conditions$stim, "B1", "B,1")
Conditions$stim <- str_replace(Conditions$stim, "B2", "B,2")
# separate "stim" var to create four new columns representing order of stimulus blocks (firstBlock, secondBlock, thirdBlock, fourthBlock)
Conditions <- Conditions %>%
mutate(baselineBlock = "BL") %>% # manually insert baseline
separate(stim, into=c("firstBlock", "secondBlock", "thirdBlock", "fourthBlock"), sep=",") %>%
pivot_longer(contains("Block"), names_to = "blockOrder", values_to = "stimBlock") # make longer
# assign correct arousal value to block ID
Conditions <- Conditions %>%
mutate(arousalCond = case_when(
`order` == "High First" ~ recode(blockOrder,
`firstBlock`="High",
`secondBlock`="Low",
`thirdBlock`="High",
`fourthBlock`="Low",
`baselineBlock` = "BL"),
`order` == "Low First" ~ recode(blockOrder,
`firstBlock`="Low",
`secondBlock`="High",
`thirdBlock`="Low",
`fourthBlock`="High",
`baselineBlock` = "BL"))) %>%
dplyr::select(-order)
# Merge condition information with image characteristics
Part2Merged <- left_join(imagesMerged, Conditions, by = c("ResponseId", "stimBlock"))
# Merge the above with the full data
Data <- left_join(Merged, Part2Merged, by = "ResponseId")
DataLong2 <- Part2 %>%
dplyr::select(ResponseId, matches('EU_|JP_') & contains("Post")) %>%  # select objective attractiveness/memory
dplyr::select(-contains("Click")) %>% # take out click data
dplyr::select(-contains("Submit")) %>% # take out page submit data
dplyr::select(-contains("_DO_")) # take out order data
# gather (pivot_longer) so that all faces are in one column and ratings are in "Value"
DataLong2 <- DataLong2 %>%
pivot_longer(cols = contains("_"), names_to = "Face", values_to = "Value")
DataLong2$Face <- str_replace(DataLong2$Face, "Post_", "")
# separate face titles ("Face") into three separate columns, one for the website origin (EU or JP) another for image number, and another one for the DV being rated (1 = objectiveAttract, 2 = rememberFace)
DataLong2 <- DataLong2 %>%
separate(Face, c("websiteCountry", "imgNum", "DV")) %>%
pivot_wider(names_from = DV, values_from = Value)
# Rename columns "1" and "8" to reflect DVs
DataLong2 <- DataLong2 %>%
dplyr::rename(objectiveAttract = "1", rememberFace = "8") %>%
dplyr::select(-websiteCountry) %>%
mutate(attractiveOrNot = ifelse(objectiveAttract > 0, "Attractive", "Not")) # create binary attractive/not
# Merge condition information with image characteristics
Data <- left_join(Data, DataLong2, by = c("ResponseId", "imgNum"))
# take out image columns now that they have been matched to condition
Data <- Data %>%
dplyr::select(-matches('EU_|JP_|SC_'))
# i1_1 enthusiastic
# i1_7 excited
# i1_9 elated
# i2_9 euphoric
# i1_6 relaxed
# i3_3 calm
# i3_9 peaceful
# i3_10 serene
# Compute raw actual HAP / actual LAP
AVI_Actual <- Data %>%
dplyr::select(ResponseId, AVI_Actual1_1:AVI_Actual3_10) %>%
distinct %>%
dplyr::group_by(ResponseId) %>%
dplyr::rowwise() %>%
dplyr::mutate(aHAP = mean(c(AVI_Actual1_1, AVI_Actual1_7, AVI_Actual1_9, AVI_Actual2_9), na.rm = T),
aLAP = mean(c(AVI_Actual1_6, AVI_Actual3_3, AVI_Actual3_9, AVI_Actual3_10), na.rm = T)) %>%
dplyr::select(ResponseId, aHAP, aLAP)
# Compute raw ideal HAP / ideal LAP
AVI_Ideal <- Data %>%
dplyr::select(ResponseId, AVI_Ideal1_1:AVI_Ideal3_10) %>%
distinct %>%
dplyr::group_by(ResponseId) %>%
dplyr::rowwise() %>%
dplyr::mutate(iHAP = mean(c(AVI_Ideal1_1, AVI_Ideal1_7, AVI_Ideal1_9, AVI_Ideal2_9), na.rm = T),
iLAP = mean(c(AVI_Ideal1_6, AVI_Ideal3_3, AVI_Ideal3_9, AVI_Ideal3_10), na.rm = T)) %>%
dplyr::select(ResponseId, iHAP, iLAP)
# Ipsatize actual HAP / actual LAP
Ipsatized_Actual <- Data %>%
dplyr::select(ResponseId, AVI_Actual1_1:AVI_Actual3_10) %>% #Only select actual affect variables
dplyr::ungroup() %>%
dplyr::mutate(aSD = apply(.[,2:ncol(.)], na.rm = T, 1, sd)) %>% #Compute rowwise SD
dplyr::mutate(aMean = rowMeans(dplyr::select(., contains("_")), na.rm = T)) %>% #Compute rowwise means
dplyr::mutate(a_enthus_i = ifelse(aSD != 0, (AVI_Actual1_1 - aMean)/aSD, 0), #Ipsatize enthusiastic
a_excited_i = ifelse(aSD != 0, (AVI_Actual1_7 - aMean)/aSD, 0), #Ipsatize excited (ifelse function is there to ensure that if they input same answer for all affect and get SD = 0. their ipsatized value will be 0 rather than NA)
a_elated_i = ifelse(aSD != 0, (AVI_Actual1_9 - aMean)/aSD, 0), #Ipsatize elated
a_euphoric_i = ifelse(aSD != 0, (AVI_Actual2_9 - aMean)/aSD, 0), #Ipsatize euphoric
a_relaxed_i = ifelse(aSD != 0, (AVI_Actual1_6 - aMean)/aSD, 0), #Ipsatize relaxed
a_calm_i = ifelse(aSD != 0, (AVI_Actual3_3 - aMean)/aSD, 0), #Ipsatize calm
a_peaceful_i = ifelse(aSD != 0, (AVI_Actual3_9 - aMean)/aSD, 0), #Ipsatize peaceful
a_serene_i = ifelse(aSD != 0, (AVI_Actual3_10 - aMean)/aSD, 0)) %>% #Ipsatize serene
rowwise %>%
dplyr::mutate(aHAP_i = mean(c(a_enthus_i, a_excited_i, a_elated_i, a_euphoric_i), na.rm = T), #Compute ipsatized HAP
aLAP_i = mean(c(a_relaxed_i, a_calm_i, a_peaceful_i, a_serene_i), na.rm = T)) %>% #Compute ipsatized LAP
dplyr::select(ResponseId, aHAP_i, aLAP_i) %>% #Keep only the ipsatized HAP and LAP scores
dplyr::distinct()
# Ipsatize ideal HAP / ideal LAP
Ipsatized_Ideal <- Data %>%
dplyr::select(ResponseId, AVI_Ideal1_1:AVI_Ideal3_10) %>% #Only select ideal affect variables
dplyr::ungroup() %>%
dplyr::mutate(iSD = apply(.[,2:ncol(.)], na.rm = T, 1, sd)) %>% #Compute rowwise SD
dplyr::mutate(iMean = rowMeans(dplyr::select(., contains("_")), na.rm = T)) %>% #Compute rowwise means
dplyr::mutate(i_enthus_i = ifelse(iSD != 0, (AVI_Ideal1_1 - iMean)/iSD, 0), #Ipsatize enthusiastic
i_excited_i = ifelse(iSD != 0, (AVI_Ideal1_7 - iMean)/iSD, 0), #Ipsatize excited (ifelse function is there to ensure that if they input same answer for all affect and get SD = 0. their ipsatized value will be 0 rather than NA)
i_elated_i = ifelse(iSD != 0, (AVI_Ideal1_9 - iMean)/iSD, 0), #Ipsatize elated
i_euphoric_i = ifelse(iSD != 0, (AVI_Ideal2_9 - iMean)/iSD, 0), #Ipsatize euphoric
i_relaxed_i = ifelse(iSD != 0, (AVI_Ideal1_6 - iMean)/iSD, 0), #Ipsatize relaxed
i_calm_i = ifelse(iSD != 0, (AVI_Ideal3_3 - iMean)/iSD, 0), #Ipsatize calm
i_peaceful_i = ifelse(iSD != 0, (AVI_Ideal3_9 - iMean)/iSD, 0), #Ipsatize peaceful
i_serene_i = ifelse(iSD != 0, (AVI_Ideal3_10 - iMean)/iSD, 0)) %>% #Ipsatize serene
rowwise %>%
dplyr::mutate(iHAP_i = mean(c(i_enthus_i, i_excited_i, i_elated_i, i_euphoric_i), na.rm = T), #Compute ipsatized HAP
iLAP_i = mean(c(i_relaxed_i, i_calm_i, i_peaceful_i, i_serene_i), na.rm = T)) %>% #Compute ipsatized LAP
dplyr::select(ResponseId, iHAP_i, iLAP_i) %>% #Keep only the ipsatized HAP and LAP scores
dplyr::distinct()
# Add raw actual/ideal affect scores to original dataframe
Data <- left_join(Data, AVI_Actual, by = "ResponseId")
Data <- left_join(Data, AVI_Ideal, by = "ResponseId")
# Add ipsatized actual/ideal affect scores to original dataframe
Data <- left_join(Data, Ipsatized_Actual, by = "ResponseId")
Data <- left_join(Data, Ipsatized_Ideal, by = "ResponseId")
# remove individual AVI items, no longer useful
Data <- Data %>%
dplyr::select(-contains("AVI_"))
# COV_a_1 enthusiastic
# COV_a_13 excited
# COV_a_9 relaxed
# COV_a_8 calm
# Compute raw actual HAP / actual LAP
COVID_Actual <- Data %>%
dplyr::select(ResponseId, COV_a_1:COV_a_15) %>%
distinct %>%
dplyr::group_by(ResponseId) %>%
dplyr::rowwise() %>%
dplyr::mutate(COV_aHAP = mean(c(COV_a_1, COV_a_13), na.rm = T),
COV_aLAP = mean(c(COV_a_9, COV_a_8), na.rm = T)) %>%
dplyr::select(ResponseId, COV_aHAP, COV_aLAP)
# Compute raw ideal HAP / ideal LAP
COVID_Ideal <- Data %>%
dplyr::select(ResponseId, COV_i_1:COV_i_15) %>%
distinct %>%
dplyr::group_by(ResponseId) %>%
dplyr::rowwise() %>%
dplyr::mutate(COV_iHAP = mean(c(COV_i_1, COV_i_13), na.rm = T),
COV_iLAP = mean(c(COV_i_9, COV_i_8), na.rm = T)) %>%
dplyr::select(ResponseId, COV_iHAP, COV_iLAP)
# Ipsatize actual HAP / actual LAP
COVID_Ipsatized_Actual <- Data %>%
dplyr::select(ResponseId, COV_a_1:COV_a_15) %>% #Only select actual affect variables
dplyr::ungroup() %>%
dplyr::mutate(aSD = apply(.[,2:ncol(.)], na.rm = T, 1, sd)) %>% #Compute rowwise SD
dplyr::mutate(aMean = rowMeans(dplyr::select(., contains("_")), na.rm = T)) %>% #Compute rowwise means
dplyr::mutate(a_enthus_i = ifelse(aSD != 0, (COV_a_1 - aMean)/aSD, 0), #Ipsatize enthusiastic
a_excited_i = ifelse(aSD != 0, (COV_a_3 - aMean)/aSD, 0), #Ipsatize excited
a_relaxed_i = ifelse(aSD != 0, (COV_a_9 - aMean)/aSD, 0), #Ipsatize relaxed
a_calm_i = ifelse(aSD != 0, (COV_a_8 - aMean)/aSD, 0)) %>% #Ipsatize calm
rowwise %>%
dplyr::mutate(COV_aHAP_i = mean(c(a_enthus_i, a_excited_i), na.rm = T), #Compute ipsatized HAP
COV_aLAP_i = mean(c(a_relaxed_i, a_calm_i), na.rm = T)) %>% #Compute ipsatized LAP
dplyr::select(ResponseId, COV_aHAP_i, COV_aLAP_i) %>% #Keep only the ipsatized HAP and LAP scores
dplyr::distinct()
# Ipsatize ideal HAP / ideal LAP
COVID_Ipsatized_Ideal <- Data %>%
dplyr::select(ResponseId, COV_i_1:COV_i_15) %>% #Only select ideal affect variables
dplyr::ungroup() %>%
dplyr::mutate(iSD = apply(.[,2:ncol(.)], na.rm = T, 1, sd)) %>% #Compute rowwise SD
dplyr::mutate(iMean = rowMeans(dplyr::select(., contains("_")), na.rm = T)) %>% #Compute rowwise means
dplyr::mutate(i_enthus_i = ifelse(iSD != 0, (COV_i_1 - iMean)/iSD, 0), #Ipsatize enthusiastic
i_excited_i = ifelse(iSD != 0, (COV_i_3 - iMean)/iSD, 0), #Ipsatize excited
i_relaxed_i = ifelse(iSD != 0, (COV_i_9 - iMean)/iSD, 0), #Ipsatize relaxed
i_calm_i = ifelse(iSD != 0, (COV_i_8 - iMean)/iSD, 0)) %>% #Ipsatize calm
rowwise %>%
dplyr::mutate(COV_iHAP_i = mean(c(i_enthus_i, i_excited_i), na.rm = T), #Compute ipsatized HAP
COV_iLAP_i = mean(c(i_relaxed_i, i_calm_i), na.rm = T)) %>% #Compute ipsatized LAP
dplyr::select(ResponseId, COV_iHAP_i, COV_iLAP_i) %>% #Keep only the ipsatized HAP and LAP scores
dplyr::distinct()
# Add raw actual/ideal affect scores to original dataframe
Data <- left_join(Data, COVID_Actual, by = "ResponseId")
Data <- left_join(Data, COVID_Ideal, by = "ResponseId")
# Add ipsatized actual/ideal affect scores to original dataframe
Data <- left_join(Data, COVID_Ipsatized_Actual, by = "ResponseId")
Data <- left_join(Data, COVID_Ipsatized_Ideal, by = "ResponseId")
# remove individual COVID AVI items, no longer useful
Data <- Data %>%
dplyr::select(-contains("COV_a_")) %>%
dplyr::select(-contains("COV_i_"))
# CurrentMood_1 enthusiastic
# CurrentMood_13 excited
# CurrentMood_9 relaxed
# CurrentMood_8 calm
# Compute raw actual HAP / actual LAP
CurrentMood_Actual <- Data %>%
dplyr::select(ResponseId, CurrentMood_1:CurrentMood_15) %>%
distinct %>%
dplyr::group_by(ResponseId) %>%
dplyr::rowwise() %>%
dplyr::mutate(Mood_aHAP = mean(c(CurrentMood_1, CurrentMood_13), na.rm = T),
Mood_aLAP = mean(c(CurrentMood_9, CurrentMood_8), na.rm = T)) %>%
dplyr::select(ResponseId, Mood_aHAP, Mood_aLAP)
# Ipsatize actual HAP / actual LAP
CurrentMood_Ipsatized_Actual <- Data %>%
dplyr::select(ResponseId, CurrentMood_1:CurrentMood_15) %>% #Only select actual affect variables
dplyr::ungroup() %>%
dplyr::mutate(aSD = apply(.[,2:ncol(.)], na.rm = T, 1, sd)) %>% #Compute rowwise SD
dplyr::mutate(aMean = rowMeans(dplyr::select(., contains("_")), na.rm = T)) %>% #Compute rowwise means
dplyr::mutate(a_enthus_i = ifelse(aSD != 0, (CurrentMood_1 - aMean)/aSD, 0), #Ipsatize enthusiastic
a_excited_i = ifelse(aSD != 0, (CurrentMood_13 - aMean)/aSD, 0), #Ipsatize excited
a_relaxed_i = ifelse(aSD != 0, (CurrentMood_9 - aMean)/aSD, 0), #Ipsatize relaxed
a_calm_i = ifelse(aSD != 0, (CurrentMood_8 - aMean)/aSD, 0)) %>% #Ipsatize calm
rowwise %>%
dplyr::mutate(Mood_aHAP_i = mean(c(a_enthus_i, a_excited_i), na.rm = T), #Compute ipsatized HAP
Mood_aLAP_i = mean(c(a_relaxed_i, a_calm_i), na.rm = T)) %>% #Compute ipsatized LAP
dplyr::select(ResponseId, Mood_aHAP_i, Mood_aLAP_i) %>% #Keep only the ipsatized HAP and LAP scores
dplyr::distinct()
# Add raw/ipsatized actual mood scores to original dataframe
Data <- left_join(Data, CurrentMood_Actual, by = "ResponseId")
Data <- left_join(Data, CurrentMood_Ipsatized_Actual, by = "ResponseId")
# remove individual COVID AVI items, no longer useful
Data <- Data %>%
dplyr::select(-contains("CurrentMood_"))
# faces
meanDev_faces <- Data %>%
dplyr::select(ResponseId, imgNum, wantToDate, wantToKiss) %>%
filter(!grepl("SC", imgNum)) %>%  # isolate just face images
ungroup() %>%
group_by(ResponseId) %>%
dplyr::mutate(meanWantToDate = mean(wantToDate, na.rm=T),
meanWantToKiss = mean(wantToKiss, na.rm=T),
md_wantToDate = wantToDate - meanWantToDate,
md_wantToKiss = wantToKiss - meanWantToKiss) %>%
dplyr::select(ResponseId, imgNum, md_wantToDate, md_wantToKiss) #Keep only ResponseId and mean deviated scores
Data <- left_join(Data, meanDev_faces, by = c("ResponseId", "imgNum")) #Add mean deviated responses to original dataframe
# scenes
meanDev_scenes <- Data %>%
dplyr::select(ResponseId, imgNum, scenePleasant, sceneVisit) %>%
filter(grepl("SC", imgNum)) %>%  # isolate just scene images
ungroup() %>%
group_by(ResponseId) %>%
dplyr::mutate(meanScenePleasant = mean(scenePleasant, na.rm=T),
meanSceneVisit = mean(sceneVisit, na.rm=T),
md_scenePleasant = scenePleasant - meanScenePleasant,
md_sceneVisit = sceneVisit - meanSceneVisit) %>%
dplyr::select(ResponseId, imgNum, md_scenePleasant, md_sceneVisit) #Keep only ResponseId and mean deviated scores
Data <- left_join(Data, meanDev_scenes, by = c("ResponseId", "imgNum")) #Add mean deviated responses to original dataframe
# manually enter participant's heart rate (R_6QFLyDW5szB35RL)
Data <- Data %>%
mutate(HR_1B = ifelse(ResponseId == "R_6QFLyDW5szB35RL", 23, HR_1B))
HR <- Data %>%
dplyr::select(HR_BL, HR_1A, HR_1B, HR_2A, HR_2B, ResponseId) %>%
pivot_longer(cols = contains("HR_"), names_to = "stimBlock", values_to = "HR") %>%
distinct
HR$stimBlock <- str_replace(HR$stimBlock, "HR_", "") # Take out "HR_" before each block in HR_Block column
# take out columns from original Data
Data <- Data %>%
dplyr::select(-c(HR_1A, HR_1B, HR_2A, HR_2B))
# join the HR data to Data
Data <- left_join(Data, HR, by = c("ResponseId", "stimBlock"))
# plot
ggplot(data = subset(Data, arousalCond == "High" | arousalCond == "Low"), aes(x = arousalCond, y = HR * 4, fill = arousalCond)) +
geom_bar(position="dodge", stat = "summary", fun = "mean") +
stat_summary(geom = "errorbar", fun.data = mean_se, position=position_dodge(.9), width = 0.2) +
scale_x_discrete(limits=c("Low","High"),
labels=c("Low","High")) +
ylab("Heart Rate (Beats Per Minute)") +
scale_x_discrete(name="Arousal\nCondition",
breaks=c("High","Low"),
labels=c("High","Low")) +
scale_fill_manual(values=c("#73a2e9", "#ff0000")) +
theme(legend.position = "none") # hide legend
ManipCheck <- Data %>%
dplyr::select(HR, arousalCond, ResponseId) %>%
filter(arousalCond != "BL") %>%
distinct()
# run analysis
lmer(data = ManipCheck, HR ~ arousalCond + (1|ResponseId)) %>% summary
# visualize
Data %>%
dplyr::select(ResponseId, arousalCond, stimBlock, HR) %>%
distinct() %>%
pivot_wider(names_from = arousalCond, values_from = HR) %>%
dplyr::select(ResponseId, BL, High, Low, stimBlock) %>%
distinct()
ManipulationCheck <- Data %>%
filter(arousalCond != "BL") %>%
group_by(ResponseId, arousalCond) %>%
dplyr::summarise(average_HR = sum(HR, na.rm=T)/2) %>%
pivot_wider(names_from = arousalCond, values_from = average_HR) %>%
mutate(HR_diff = High - Low) %>%
mutate(manipCheck = ifelse(HR_diff > 0, "pass", "fail")) %>%  #if high - low arousal HR is positive, then put "pass" for manipCheck, otherwise "fail"
dplyr::select(ResponseId, manipCheck, HR_diff)
ggplot(ManipulationCheck, aes(x = ResponseId, y = HR_diff, color=manipCheck)) +
geom_point() +
geom_hline(yintercept = 0) +
ylab("Heart Rate Difference\n(High - Low Arousal)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
xlab("Participant") +
scale_color_discrete(name="Manipulation\nCheck",
breaks=c("fail", "pass"),
labels=c("Fail", "Pass"))
# merge manipulation check column to main Data
Data <- left_join(Data, ManipulationCheck, by = c("ResponseId"))
# check numbers of people with counterintuitive heart rates
Data %>%
dplyr::select(ResponseId, arousalCond, stimBlock, HR, HR_diff) %>%
distinct() %>%
filter(HR_diff < 0) %>%
pivot_wider(names_from = arousalCond, values_from = HR) %>%
dplyr::select(ResponseId, BL, High, Low, stimBlock, HR_diff) %>%
distinct()
# still need, total (excluding those who failed HR manipulation check)
stillNeed = 50 - dim(Part2)[1] + sum(ManipulationCheck$manipCheck == "fail")
# in pipeline
appointMade = dim(Part1)[1] - dim(Part2)[1] - 5
# number that still needs to get started on Part 1
stillNeed - appointMade
# test if low arousal following high arousal is higher in heart rate than low arousal that comes first
carryOver <- Data %>%
filter(blockOrder == "firstBlock" | blockOrder == "secondBlock") %>%
filter(arousalCond == "Low") %>%
dplyr::select(ResponseId, HR, blockOrder, arousalCond) %>%
distinct()
lm(data = carryOver, HR ~ blockOrder) %>% summary
# test whether second half of manipulations have higher heart rate than first half of manipulations
carryOver <- Data %>%
filter(arousalCond != "BL") %>%
mutate(halfOrder = ifelse(blockOrder == "firstBlock" | blockOrder == "secondBlock", "firstHalf", "secondHalf")) %>%
dplyr::select(ResponseId, HR, blockOrder, arousalCond, halfOrder) %>%
distinct()
lmer(data = carryOver, HR ~ halfOrder + (1|ResponseId)) %>% summary
ggplot(data = carryOver, aes(x = halfOrder, y = HR)) +
geom_bar(position="dodge", stat = "summary", fun = "mean") +
stat_summary(geom = "errorbar", fun.data = mean_se, position=position_dodge(.9), width = 0.2) +
coord_cartesian(y = c(15,25)) +
ylab("Reported Heart Rate") +
scale_x_discrete(name="First or Second Half",
breaks=c("firstHalf","secondHalf"),
labels=c("First Half","Second Half"))
noVar <- Data %>%
group_by(ResponseId) %>%
dplyr::summarise(sd_date =sd(wantToDate, na.rm=T),
sd_kiss =sd(wantToKiss,  na.rm=T),
sd_pleasant =sd(scenePleasant,  na.rm=T),
sd_visit =sd(sceneVisit,  na.rm=T)) %>%
mutate(noVar = ifelse(sd_date == 0 & sd_kiss == 0 & sd_pleasant == 0 & sd_visit == 0, "noVar", "Var")) %>%
dplyr::select(ResponseId, noVar)
# merge noVar column to main Data
Data <- left_join(Data, noVar, by = c("ResponseId"))
noVar
# Take only US pretest ratings
Pretest <- Pretest %>%
filter(Culture == "European American") %>%
dplyr::select(-c(Culture, image, X)) %>%
mutate(imgNum = as.character(imgNum))
# Rename pretest columns
Pretest <- Pretest %>%
dplyr::rename(pretestMeanAttract = meanAttract,
pretestMeanDAttract = meanDAttract,
pretestMeanCalm = meanCalm,
pretestMeanDCalm = meanDCalm,
pretestMeanExcited = meanExcited,
pretestMeanDExcited = meanDExcited,
pretestMeanValence = meanValence,
pretestMeanDValence = meanDValence,
pretestMeanArousal = meanArousal,
pretestMeanDArousal = meanDArousal)
# add image location column for each image
Pretest <- Pretest %>%
dplyr::mutate(imageLoc = imgNum)
Pretest$imageLoc <- paste("../../Stimuli/allStimuli.png/", Pretest$imageLoc, ".png", sep="")
# merge Pretest data with main Data
Data <- left_join(Data, Pretest, by = c("imgNum", "websiteCountry"))
unique(Data$pID1)
unique(Data$ResponseId)
Data %>%
filter(arousalCond != "BL") %>% # take out baseline
filter(manipCheck == "pass")
DataFull <- Data %>%
filter(arousalCond != "BL") %>% # take out baseline
filter(manipCheck == "pass")
unique(DataFull$ResponseId)
DataFull <- Data %>%
filter(arousalCond != "BL") %>% # take out baseline
filter(manipCheck == "pass") %>% # only those who passed manipulation check
filter(noVar != "noVar")
unique(DataFull$ResponseId)
DataFull <- Data %>%
filter(arousalCond != "BL") %>% # take out baseline
filter(manipCheck == "pass") %>% # only those who passed manipulation check
filter(noVar != "noVar")
unique(DataFull$ResponseId) # 46 who passed manip
DataFull <- Data %>%
filter(arousalCond != "BL") %>% # take out baseline
filter(manipCheck == "pass") %>% # only those who passed manipulation check
filter(noVar != "noVar") %>%  # only those who varied their responses
filter(ActuallyRan != 2)
unique(DataFull$ResponseId) # 46 who passed manip and novar
DataFull <- Data %>%
filter(arousalCond != "BL") %>% # take out baseline
filter(manipCheck == "pass") %>% # only those who passed manipulation check
filter(noVar != "noVar") %>%  # only those who varied their responses
filter(ActuallyRan != 2) %>% # make sure they did not admit to not running
filter(Attention_Check == 7)
unique(DataFull$ResponseId) # 46 who passed manip and novar and ran
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
# 44 who passed attention check
DataFull$Email=="joe.murner0228@gmail.com"
# 44 who passed attention check
DataFull$Email1=="joe.murner0228@gmail.com"
# 44 who passed attention check
DataFull$ResponseId[DataFull$Email1=="joe.murner0228@gmail.com"]
# 44 who passed attention check
Data$ResponseId[DataFull$Email1=="joe.murner0228@gmail.com"]
# 44 who passed attention check
Data$ResponseId[Data$Email1=="joe.murner0228@gmail.com"]
# 44 who passed attention check
checkthis <- Data %>%
filter(Email1=="joe.murner0228@gmail.com")
checkthis
View(checkthis)
Data %>%
filter(Email1=="joe.murner0228@gmail.com") %>%
select(Attention_Check)
# 44 who passed attention check
checkthis <- Data %>%
filter(Email1=="joe.murner0228@gmail.com") %>%
select(manipCheck)
checkthis
# 44 who passed attention check
checkthis <- Data %>%
filter(Email1=="joe.murner0228@gmail.com") %>%
select(HR)
checkthis
stillNeed
